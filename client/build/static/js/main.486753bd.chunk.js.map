{"version":3,"sources":["App.js","DataProvider.js","serviceWorker.js","index.js"],"names":["subscribe","topic","data","useState","origin","flight","arrival","state","arrivalData","setArrivalData","console","log","useEffect","length","flightState","newData","map","item","updateFlightState","className","onClick","fetch","bind","this","columns","Header","accessor","Boolean","window","location","hostname","match","ReactDOM","render","mqttProps","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWA2DeA,0BAAU,CACrBC,MAAO,kCADID,EArDf,YAAsB,IAARE,EAAO,EAAPA,KAAO,EACqBC,mBCN/B,CACH,CACIC,OAAQ,SACRC,OAAQ,OACRC,QAAS,QACTC,MAAO,IAEX,CACIH,OAAQ,SACRC,OAAQ,OACRC,QAAS,QACTC,MAAO,IAEX,CACIH,OAAQ,WACRC,OAAQ,OACRC,QAAS,QACTC,MAAO,IAEX,CACIH,OAAQ,eACRC,OAAQ,OACRC,QAAS,QACTC,MAAO,IAEX,CACIH,OAAQ,OACRC,OAAQ,OACRC,QAAS,QACTC,MAAO,IAEX,CACIH,OAAQ,QACRC,OAAQ,OACRC,QAAS,QACTC,MAAO,MD9BE,mBACVC,EADU,KACGC,EADH,KA6CjB,OAjCAC,QAAQC,IAAIT,GACZU,qBAAU,WACFV,EAAKW,OAAS,GAXI,SAACC,GACvB,IAAIC,EAAUP,EAAYQ,KAAI,SAAAC,GAI1B,OAHIA,EAAKZ,SAAWS,EAAYT,SAC5BY,EAAKV,MAAQO,EAAYP,OAEtBU,KAEXR,EAAeM,GAMXG,CADmBhB,EAAK,MAG7B,CAACA,IA4BJ,yBAAKiB,UAAU,OACX,4BAAQC,QA3BW,WACnBC,MAAM,eA0B0BC,KAAKC,OAArC,gBACA,kBAAC,IAAD,CAAYrB,KAAMM,EAAagB,QAxBnB,CACZ,CACIC,OAAQ,SACRC,SAAU,UAEd,CACID,OAAQ,SACRC,SAAU,UAEd,CACID,OAAQ,UACRC,SAAU,WAEd,CACID,OAAQ,QACRC,SAAU,gBEjCFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,YAAD,CAAWC,UAAU,8BACjB,kBAAC,EAAD,OACUC,SAASC,eAAe,SDuHpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.486753bd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport \"react-table/react-table.css\";\nimport ReactTable from \"react-table\";\nimport {getInitialFlightData} from \"./DataProvider\";\nimport { subscribe } from 'mqtt-react';\n\nfunction App({data}) {\n    const [arrivalData, setArrivalData] = useState(getInitialFlightData());\n\n    const updateFlightState = (flightState) => {\n        let newData = arrivalData.map(item => {\n            if (item.flight === flightState.flight) {\n                item.state = flightState.state;\n            }\n            return item;\n        });\n        setArrivalData(newData);\n    };\n    console.log(data);\n    useEffect(() => {\n        if (data.length > 0 ) {\n            const flightData = data[0];\n            updateFlightState(flightData);\n        };\n    }, [data]);\n\n    const startMessaging = () => {\n        fetch('/api/start');\n    };\n\n    const columns = [\n        {\n            Header: \"Origin\",\n            accessor: \"origin\"\n        },\n        {\n            Header: \"Flight\",\n            accessor: \"flight\"\n        },\n        {\n            Header: \"Arrival\",\n            accessor: \"arrival\"\n        },\n        {\n            Header: \"State\",\n            accessor: \"state\"\n        }\n    ];\n\n\n\n    return (\n    <div className=\"App\">\n        <button onClick={startMessaging.bind(this)}>Start events</button>\n        <ReactTable data={arrivalData} columns={columns} />\n    </div>\n    );\n}\n\nexport default subscribe({\n    topic: 'a13xg0-mqtt-demo/flight-data-1'\n})(App);\n","export function getInitialFlightData() {\n    return [\n        {\n            origin: \"London\",\n            flight: \"A123\",\n            arrival: \"08:15\",\n            state: \"\"\n        },\n        {\n            origin: \"Berlin\",\n            flight: \"D654\",\n            arrival: \"08:45\",\n            state: \"\"\n        },\n        {\n            origin: \"New York\",\n            flight: \"U213\",\n            arrival: \"09:05\",\n            state: \"\"\n        },\n        {\n            origin: \"Buenos Aires\",\n            flight: \"A987\",\n            arrival: \"09:30\",\n            state: \"\"\n        },\n        {\n            origin: \"Rome\",\n            flight: \"I768\",\n            arrival: \"10:10\",\n            state: \"\"\n        },\n        {\n            origin: \"Tokyo\",\n            flight: \"G119\",\n            arrival: \"10:35\",\n            state: \"\"\n        }\n    ];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Connector } from 'mqtt-react';\n\nReactDOM.render(\n    <Connector mqttProps=\"mqtt://localhost:5000/mqtt\">\n        <App />\n    </Connector>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}